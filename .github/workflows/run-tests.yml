name: Tests
on: [push]
jobs:
  js-tests:
    name: Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "14"
          cache: "npm"
      - name: Install node dependencies
        run: npm ci
      - name: Run tests
        run: npm run test:ci

  python-linting:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.9.12"
      - name: Install build dependencies
        run: python -m pip install black==22.3.0
      - name: Run black
        run: python -m black --check .

  docker-build:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: .github/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ghcr.io/lafranceinsoumise/actionpopulaire.fr/agir-test-image:latest

  python-tests:
    name: Django
    needs: docker-build
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/lafranceinsoumise/actionpopulaire.fr/agir-test-image:latest
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    services:
      postgres:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.9.12"
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.0.0"
      - uses: actions/cache@v3
        id: restore-cache
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: pip-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            pip-${{ hashFiles('poetry.lock') }}
            pip-
      - name: Install build dependencies
        run:
          poetry install
      - uses: actions/setup-node@v3
        with:
          node-version: "14"
          cache: "npm"
      - name: Install node dependencies
        run: npm ci
      - uses: actions/cache@v3
        with:
          path: ~/.babel-cache
          key: babel-${{ hashFiles('agir/**/*.js') }}
          restore-keys: |
            babel-${{ hashFiles('agir/**/*.js') }}
            babel-
      - name: Build bundles
        run: npm run build:dev
        env:
          BABEL_CACHE_DIRECTORY: ~/.babel-cache
          WEBPUSH_PUBLIC_KEY: "dummy"
      - name: Run tests
        run: python -m poetry run coverage run ./manage.py test -v 2
        env:
          DATABASE_URL: "postgis://postgres:postgres@postgres:5432/postgres"
          LOG_DISABLE_JOURNALD: true
      - name: Report coverage
        run: |
          python -m poetry run coverage report
          python -m poetry run coverage json
          echo "::notice title=Coverage::Coverage $(jq .totals.percent_covered < coverage.json) %"
